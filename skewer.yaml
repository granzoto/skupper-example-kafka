title: Accessing a Kafka cluster using Skupper
subtitle: Use public cloud resources to process data from a private Kafka cluster
github_actions_url: https://github.com/skupperproject/skupper-example-kafka/actions/workflows/main.yaml
overview: |
  This example is a simple Kafka application that shows how you can
  use Skupper to access a Kafka cluster at a remote site without
  exposing it to the public internet.

  It contains two services:

  * A Kafka cluster named "cluster1" running in a private data center.
    The cluster has a topic named "topic1".

  * A Kafka client running in the public cloud.  It sends 10 messages
    to "topic1" and then receives them back.

  To set up the Kafka cluster, this example uses the Kubernetes
  operator from the [Strimzi][strimzi] project.  The Kafka client is a
  Java application built using [Quarkus][quarkus].

  The example uses two Kubernetes namespaces, "private" and "public",
  to represent the private data center and public cloud.

  [strimzi]: https://strimzi.io/
  [quarkus]: https://quarkus.io/
sites:
  public:
    kubeconfig: ~/.kube/config-public
    namespace: public
  private:
    kubeconfig: ~/.kube/config-private
    namespace: private
steps:
  - standard: configure_separate_console_sessions
  - standard: access_your_clusters
  - standard: set_up_your_namespaces
  - standard: install_skupper_in_your_namespaces
  - standard: check_the_status_of_your_namespaces
  - standard: link_your_namespaces
  - title: Deploy the Kafka cluster
    preamble: |
      In the private namespace, use the `kubectl create` and `kubectl
      apply` commands with the listed YAML files to install the
      operator and deploy the cluster and topic.
    commands:
      private:
        - run: kubectl create -f strimzi.yaml
        - run: kubectl apply -f cluster1.yaml
        - run: kubectl wait --for condition=ready --timeout 900s kafka/cluster1
        - run: kubectl apply -f topic1.yaml
        - run: sleep 10
          apply: test # XXX
        # - run: kubectl wait --for condition=ready --timeout 180s kafka/topic1
  - title: Expose the Kafka cluster
    preamble: |
      In the private namespace, use `skupper expose` with the
      `--headless` option to expose the Kafka cluster as a headless
      service on the Skupper network.

      Then, in the public namespace, use `kubectl get services` to
      check that the `cluster1-kafka-brokers` service appears after a
      moment.
    commands:
      private:
        - run: skupper expose statefulset/cluster1-kafka --headless --port 9092
      public:
        - run: kubectl get services
  - title: Run the client program
    preamble: |
      Use the `kubectl run` command to execute the client program in
      the public namespace.
    commands:
      public:
        - await: service/cluster1-kafka-brokers
        - run: kubectl run client --attach --rm --restart Never --image quay.io/skupper/kafka-example-client --env BOOTSTRAP_SERVERS=cluster1-kafka-brokers:9092
    postamble: |
      To see the client code, look in the [client
      subdirectory](client) of this project.
  - standard: accessing_the_web_console
  - standard: cleaning_up
    commands:
      private:
        - run: skupper delete
        - run: kubectl delete -f topic1.yaml
        - run: kubectl delete -f cluster1.yaml
        - run: kubectl delete -f strimzi.yaml
      public:
        - run: skupper delete
